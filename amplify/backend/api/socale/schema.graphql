type Match @model @auth(rules: [{allow: public}]) {
  id: ID!
  matchingPercentage: String!
  user: User! @hasOne
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  email: AWSEmail!
  schoolEmail: AWSEmail!
  firstName: String!
  lastName: String!
  dateOfBirth: AWSDate!
  graduationMonth: AWSDate!
  major: [String!]!
  minor: [String]!
  college: String!
  skills: [String!]!
  careerGoals: [String!]!
  selfDescription: [String!]!
  leisureInterests: [String]!
  idealFriendDescription: String!
  situationalDecisions: [Int!]!
  academicInterests: [String!]!
  avatar: String!
  anonymousUsername: String!
  introMatchingCompleted: Boolean!
  matches: [String]!
  profilePicture: String
  notificationToken: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  messages: [Message!] @hasMany
  userRoom: [UserRoom!] @hasMany(indexName: "byUser", fields: ["id"])
}

type UserRoom @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields: ["roomID"])
  roomID: ID! @index(name: "byRoom", sortKeyFields: ["userID"])
  user: User! @belongsTo(fields: ["userID"])
  room: Room! @belongsTo(fields: ["roomID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Room @model @auth(rules: [{allow: public}]) {
  id: ID!
  lastMessageSent: String
  roomType: String!
  messages: [Message!] @hasMany
  userRoom: [UserRoom!] @hasMany(indexName: "byRoom", fields: ["id"])
  isHidden: AWSJSON!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Message @model @auth(rules: [{allow: public}]) {
  id: ID!
  text: String!
  room: Room! @belongsTo
  author: User! @belongsTo
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}
 