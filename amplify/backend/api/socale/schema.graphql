type Match @model @auth(rules: [{ allow: public }]) {
	id: ID!
	matchingPercentage: String
	user: User @hasOne
}

type User @model @auth(rules: [{ allow: public }]) {
	id: ID!
	email: AWSEmail!
	schoolEmail: AWSEmail!
	firstName: String!
	lastName: String!
	dateOfBirth: AWSDate!
	graduationMonth: AWSDate!
	major: [String!]!
	minor: [String]!
	college: String!
	skills: [String!]!
	careerGoals: [String!]!
	selfDescription: [String!]!
	leisureInterests: [String]!
	idealFriendDescription: String!
	situationalDecisions: [Int!]!
	academicInterests: [String!]!
	avatar: String!
	anonymousUsername: String!
	introMatchingCompleted: Boolean!
	messages: [Message!] @hasMany
	userRoom: [UserRoom] @hasMany(indexName: "byUser", fields: ["id"])
	matches: [String]!
}

type UserRoom @model @auth(rules: [{ allow: public }]) {
	id: ID!
	userID: ID! @index(name: "byUser", sortKeyFields: ["roomID"])
	roomID: ID! @index(name: "byRoom", sortKeyFields: ["userID"])
	user: User @belongsTo(fields: ["userID"])
	room: Room @belongsTo(fields: ["roomID"])
}

type Room @model @auth(rules: [{ allow: public }]) {
	id: ID!
	lastMessage: String
	messages: [Message!] @hasMany
	userRoom: [UserRoom!] @hasMany(indexName: "byRoom", fields: ["id"])
}

type Message @model @auth(rules: [{ allow: public }]) {
	id: ID!
	room: Room @belongsTo
	encryptedText: String!
	author: User! @belongsTo
	createdAt: AWSDateTime!
}
